#if !canImport(ObjectiveC)
import XCTest

extension FetcherSpec {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetcherSpec = [
        ("a_Fetcher__should_have_correct_url", a_Fetcher__should_have_correct_url),
        ("a_Fetcher__should_initialize_correctly_with_params_dictionary", a_Fetcher__should_initialize_correctly_with_params_dictionary),
        ("a_Fetcher__should_parse_data_properly", a_Fetcher__should_parse_data_properly),
        ("a_Fetcher__should_return_parsing_error_if_invalid_data", a_Fetcher__should_return_parsing_error_if_invalid_data),
        ("a_Fetcher__should_return_correct_error_if_not_found", a_Fetcher__should_return_correct_error_if_not_found),
    ]
}

extension GeneratorSpec {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GeneratorSpec = [
        ("a_Generator__should_not_initialize_if_repository_name_does_not_match_format", a_Generator__should_not_initialize_if_repository_name_does_not_match_format),
        ("a_Generator__when_fetching_all_pages__should_generate_correct_changelog", a_Generator__when_fetching_all_pages__should_generate_correct_changelog),
        ("a_Generator__when_fetching_all_pages__should_generate_changelog_since_release", a_Generator__when_fetching_all_pages__should_generate_changelog_since_release),
        ("a_Generator__when_fetching_all_pages__should_generate_changelog_since_given_tag", a_Generator__when_fetching_all_pages__should_generate_changelog_since_given_tag),
        ("a_Generator__when_initialized_with_token__for_complete_changelog__should_send_token_in_headers", a_Generator__when_initialized_with_token__for_complete_changelog__should_send_token_in_headers),
        ("a_Generator__when_initialized_with_token__for_latest_release__should_send_token_in_headers", a_Generator__when_initialized_with_token__for_latest_release__should_send_token_in_headers),
        ("a_Generator__when_initialized_with_token__for_since_tag__should_send_token_in_headers", a_Generator__when_initialized_with_token__for_since_tag__should_send_token_in_headers),
        ("a_Generator__when_initialized_with_token__when_filter_regex_is_provided__should_not_include_pull_requests_matching_the_regex", a_Generator__when_initialized_with_token__when_filter_regex_is_provided__should_not_include_pull_requests_matching_the_regex),
    ]
}

extension GitHubSpec {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GitHubSpec = [
        ("a_GitHub__should_fetch_all_pages", a_GitHub__should_fetch_all_pages),
        ("a_GitHub__should_fetch_first_properly", a_GitHub__should_fetch_first_properly),
        ("a_GitHub__should_fetch_release_properly", a_GitHub__should_fetch_release_properly),
        ("a_GitHub__should_search_pull_requests_properly", a_GitHub__should_search_pull_requests_properly),
    ]
}

extension PaginationFetcherSpec {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PaginationFetcherSpec = [
        ("a_PaginationFetcher__when_fetching_all_pages__should_load_all_pages", a_PaginationFetcher__when_fetching_all_pages__should_load_all_pages),
        ("a_PaginationFetcher__when_fetching_all_pages__should_fail_if_a_page_isn_t_fetched", a_PaginationFetcher__when_fetching_all_pages__should_fail_if_a_page_isn_t_fetched),
        ("a_PaginationFetcher__when_fetching_pages_with_a_limit__should_load_pages", a_PaginationFetcher__when_fetching_pages_with_a_limit__should_load_pages),
        ("a_PaginationFetcher__when_intermediate_result_handler_is_used__should_load_all_pages", a_PaginationFetcher__when_intermediate_result_handler_is_used__should_load_all_pages),
    ]
}

extension SearchResultsFetcherSpec {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SearchResultsFetcherSpec = [
        ("a_SearchResultsFetcher__when_fetching_all_pages__should_load_all_pages", a_SearchResultsFetcher__when_fetching_all_pages__should_load_all_pages),
        ("a_SearchResultsFetcher__when_fetching_all_pages__should_fail_if_a_page_isn_t_fetched", a_SearchResultsFetcher__when_fetching_all_pages__should_fail_if_a_page_isn_t_fetched),
        ("a_SearchResultsFetcher__when_fetching_pages_with_a_limit__should_load_pages", a_SearchResultsFetcher__when_fetching_pages_with_a_limit__should_load_pages),
        ("a_SearchResultsFetcher__when_intermediate_result_handler_is_used__should_load_all_pages", a_SearchResultsFetcher__when_intermediate_result_handler_is_used__should_load_all_pages),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(FetcherSpec.__allTests__FetcherSpec),
        testCase(GeneratorSpec.__allTests__GeneratorSpec),
        testCase(GitHubSpec.__allTests__GitHubSpec),
        testCase(PaginationFetcherSpec.__allTests__PaginationFetcherSpec),
        testCase(SearchResultsFetcherSpec.__allTests__SearchResultsFetcherSpec),
    ]
}
#endif
